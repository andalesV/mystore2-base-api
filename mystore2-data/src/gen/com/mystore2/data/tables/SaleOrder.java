/*
 * This file is generated by jOOQ.
*/
package com.mystore2.data.tables;


import com.mystore2.data.Keys;
import com.mystore2.data.Public;
import com.mystore2.data.enums.StatusEnum;
import com.mystore2.data.tables.records.SaleOrderRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SaleOrder extends TableImpl<SaleOrderRecord> {

    private static final long serialVersionUID = 1751841722;

    /**
     * The reference instance of <code>public.sale_order</code>
     */
    public static final SaleOrder SALE_ORDER = new SaleOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SaleOrderRecord> getRecordType() {
        return SaleOrderRecord.class;
    }

    /**
     * The column <code>public.sale_order.id</code>.
     */
    public final TableField<SaleOrderRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('sale_order_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.sale_order.customer_name</code>.
     */
    public final TableField<SaleOrderRecord, String> CUSTOMER_NAME = createField("customer_name", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>public.sale_order.status</code>.
     */
    public final TableField<SaleOrderRecord, StatusEnum> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.mystore2.data.enums.StatusEnum.class), this, "");

    /**
     * The column <code>public.sale_order.created_date</code>.
     */
    public final TableField<SaleOrderRecord, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.sale_order.last_modified_date</code>.
     */
    public final TableField<SaleOrderRecord, Timestamp> LAST_MODIFIED_DATE = createField("last_modified_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>public.sale_order</code> table reference
     */
    public SaleOrder() {
        this("sale_order", null);
    }

    /**
     * Create an aliased <code>public.sale_order</code> table reference
     */
    public SaleOrder(String alias) {
        this(alias, SALE_ORDER);
    }

    private SaleOrder(String alias, Table<SaleOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private SaleOrder(String alias, Table<SaleOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SaleOrderRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SALE_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SaleOrderRecord> getPrimaryKey() {
        return Keys.SALE_ORDER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SaleOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<SaleOrderRecord>>asList(Keys.SALE_ORDER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SaleOrder as(String alias) {
        return new SaleOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SaleOrder rename(String name) {
        return new SaleOrder(name, null);
    }
}
